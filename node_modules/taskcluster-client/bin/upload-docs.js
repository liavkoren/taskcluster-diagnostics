#!/usr/bin/env node
var base    = require('taskcluster-base');
var path    = require('path');
var Promise = require('promise');

/** Upload docs */
var launch = function() {
  var docs = base.docs.FromFile({
    file:     path.join(__dirname, '..', 'docs', 'intro.md'),

  })


  base.docs.publishFolder({
    baseFolder:   path.join(__dirname, '..', 'docs'),
    prefix:       'client/',
    topics: [
      'client.md',
      'amqplistener.md',
      'weblistener.md',
      'v1/exchanges.json',
      'v1/api.json'
    ]
  });

  api.publish({
    prefix:   'client/',
    name:     'v1/api.json',
    baseUrl:  'https://client.tc.net/'
  });

  exchanges.reference({
    prefix:         'client/',
    name:           'v1/exchanges.json',
    exchangePrefix: 'client/'
  });


  // LOOK at: https://www.npmjs.org/package/yaml-front-matter

  var section = new base.docs.Section({
    baseFolder:   path.join(__dirname, '..', 'docs'),
    file:         'index.md',
    entries: [
      {
        title:    "API Client",
        markdown: 'client.md'
      }, {
        title:    "Reference",
        markdown: 'reference.md'
      }, {
        title:    "AMQP Listener",
        markdown: 'amqplistener.md'
      }, {
        title:    "WebSocket Listener",
        markdown: 'weblistener.md'
      }, {
        title:    "Exchanges",
        name:     'exchanges',
        content:  exchanges.reference({exchangePrefix: 'client/'})
      }, {
        title:    "API Reference (version 1)",
        name:     'v1/api',
        content:  api.reference({baseUrl: 'https://client.tc.net/'})
      }, {
        title:    "Source Repository",
        href:     "https://github.com/taskcluster/taskcluster-client"
      }, {
        title:    "Tutorial: Writing Tasks",
        section:  new base.docs.Section({
          baseFolder: ...
          markdown:   ...
          entries: {
            ...
          }
        })
      }
    ]
  })

  return section.publish({
    prefix:   'client/'
  });
};

// If this file is executed run launch
if (!module.parent) {
  // Launch
  launch().then(function() {
    debug("Launched successfully");
  }).catch(function(err) {
    debug("Failed to start, err: %s, as JSON: %j", err, err, err.stack);
    // If we didn't launch we should crash
    process.exit(1);
  });
}

// Export launch in-case anybody cares
module.exports = launch;
